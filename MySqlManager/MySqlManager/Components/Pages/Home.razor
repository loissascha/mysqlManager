@page "/"
@using System.Text.RegularExpressions
@using MySqlManager.Components.Layout
@using MySqlManager.Services
@using MySqlManager.Dtos
@inject MySqlManagerService MySqlManagerService
@inject SettingsService SettingsService
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (SettingsService.Settings?.ConnectionStrings.Count > 0)
{
    <div class="row mt-3 mb-3">
        <div class="col-6">
            <select class="form-control" @bind="ActiveIndex">
                @for (var i = 0; i < SettingsService.Settings.ConnectionStrings.Count; i++)
                {
                    var saveString = Regex.Replace(SettingsService.Settings.ConnectionStrings[i].ConStr, "password=.*?;", x => "password=****;");
                    <option value="@i">@saveString</option>
                }
            </select>
        </div>
        <div class="col-6 d-flex justify-content-end">
            @if (!_addingNewHost)
            {
                <button class="btn btn-primary" @onclick="ShowAddHostButton">
                    <i class="nf nf-fa-plus"></i> Add Host
                </button>
            }
        </div>
    </div>
}

@if (_errors != null)
{
    @foreach (var error in _errors)
    {
        <div class="alert alert-danger">@error</div>
    }
}

<div class="row">

    <div class="col-6">
        
        <div class="card mt-3 mb-3">
            <div class="card-header">
                Appearance settings
            </div>
            <div class="card-body">
                Theme
            </div>
        </div>

        @if (_connectionPossible && _collations.Count > 0)
        {
            <div class="card mt-3 mb-3">
                <div class="card-header">
                    <i class="nf nf-fa-plus"></i> New Database
                </div>
                <div class="card-body">

                </div>
            </div>
        }

        @if (_addingNewHost)
        {
            <div class="card mt-3 mb-3">
                <div class="card-header">
                    Add Host
                </div>
                <div class="card-body">
                    <div class="mb-3">
                        <label for="host" class="form-label">Host</label>
                        <input id="host" class="form-control" type="text" @bind="ConfigHost" required/>
                    </div>
                    <div class="mb-3">
                        <label for="port" class="form-label">Port</label>
                        <input id="port" class="form-control" type="text" @bind="ConfigPort" required/>
                    </div>
                    <div class="mb-3">
                        <label for="user" class="form-label">User</label>
                        <input id="user" class="form-control" type="text" @bind="ConfigUser" required/>
                    </div>
                    <div class="mb-3">
                        <label for="password" class="form-label">Password</label>
                        <input id="password" class="form-control" type="text" @bind="ConfigPassword"/>
                    </div>
                    <button class="btn btn-primary" @onclick="AddHostButton">Add Host</button>
                    @if (_connectionPossible)
                    {
                        <button class="btn btn-secondary ms-3" @onclick="CancelHostButton">Cancel</button>
                    }
                </div>
            </div>
        }
        
    </div>
    
    <div class="col-6">
        
        @if (_serverInformation != null)
        {

            <div class="card mt-3 mb-3">
                <div class="card-header">
                    <i class="nf nf-cod-server"></i> Server Information
                </div>
                <div class="card-body">
                    Server Type: @_serverInformation.ServerType<br/>
                    Version: @_serverInformation.Version <br/>
                    Protocol Version: @_serverInformation.ProtocolVersion <br/>
                    OS: @_serverInformation.VersionCompileOs
                </div>
            </div>
        }
        
    </div>
</div>




@code {

    private ServerInformationDto? _serverInformation;
    private bool _loading = true;
    private List<string>? _errors;
    private bool _addingNewHost = false;
    private bool _allowActiveIndexChange = false;
    private bool _connectionPossible = false;
    private List<string> _collations = new List<string>();

    private int _activeConnectionIndex;

    private int ActiveIndex
    {
        get => _activeConnectionIndex;
        set
        {
            if (_activeConnectionIndex == value) return;
            _activeConnectionIndex = value;

            OnHostSelectChange();
        }
    }
    
    private string? ConfigHost { get; set; }
    private string? ConfigPort { get; set; }
    private string? ConfigUser { get; set; }
    private string? ConfigPassword { get; set; }


    protected override async Task OnInitializedAsync()
    {
        _allowActiveIndexChange = false;
        ActiveIndex = SettingsService.GetActiveConnectionStringIndex(); 
        
        await LoadServerVersion();
    }

    private async Task LoadServerVersion()
    {
        Console.WriteLine("Load server version...");
        _loading = true;
        _serverInformation = null;
        _addingNewHost = false;
        _connectionPossible = false;
        _errors = new List<string>();
        _collations = new List<string>();
        if (await MySqlManagerService.IsConnectionPossible())
        {
            Console.WriteLine("Connection is possible!");
            _connectionPossible = true;
            _loading = false;
            Console.WriteLine("Loading server version...");
            _serverInformation = await MySqlManagerService.GetServerVersion();
            _collations = await MySqlManagerService.GetCollations();
        }
        else
        {
            Console.WriteLine("Connection not possible -.-");
            _loading = false;
            _addingNewHost = true;
            _errors?.Add("No host found or currently selected host not available. Please select a different one or add add a new host!");
        }
        await InvokeAsync(StateHasChanged);
        _allowActiveIndexChange = true;
    }

    private async Task AddHostButton()
    {
        Console.WriteLine("SaveConfig Button");
        
        _errors = new List<string>();

        if (string.IsNullOrEmpty(ConfigHost))
        {
            _errors.Add("Host is empty.");
            return;
        }
        if (string.IsNullOrEmpty(ConfigPort))
        {
            _errors.Add("Port is empty.");
            return;
        }
        if (string.IsNullOrEmpty(ConfigUser))
        {
            _errors.Add("User is empty.");
            return;
        }
        
        SettingsService.AddConnectionString(ConfigHost, ConfigPort, ConfigUser, ConfigPassword ?? "");
        ConfigHost = "";
        ConfigPort = "";
        ConfigUser = "";
        ConfigPassword = "";
        _addingNewHost = false;
    }

    private void CancelHostButton()
    {
        ConfigHost = "";
        ConfigPort = "";
        ConfigUser = "";
        ConfigPassword = "";
        _addingNewHost = false;
    }

    private void ShowAddHostButton()
    {
        _addingNewHost = true;
    }

    private async void OnHostSelectChange()
    {
        if (!_allowActiveIndexChange) return;
        Console.WriteLine("OnHostSelectChange");
        SettingsService.SetConnectionIndexActive(ActiveIndex);
        MySqlManagerService.ResetDatabaseList();
        await LoadServerVersion();
        await MySqlManagerService.RefreshDatabaseList();
        // NavigationManager.NavigateTo(NavigationManager.Uri, forceLoad: true);
    }

}