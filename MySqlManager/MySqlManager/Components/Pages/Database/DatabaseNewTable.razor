@page "/database/{Database}/new/table"
@using Microsoft.AspNetCore.Http.Features
@using MySqlManager.Dtos
@using MySqlManager.Services
@inject MySqlManagerService MySqlManagerService
@inject DatabaseInformationService DatabaseInformationService
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<div class="mb-3">
    <label for="tableName" class="form-label">Table Name</label>
    <input type="text" class="form-control" id="tableName" @bind="_tableName" />
</div>
<div class="mb-3">
    <button class="btn btn-primary" @onclick="AddLine">+</button>
    <button class="btn btn-primary" @onclick="RemoveLine">-</button>
</div>
<div class="mb-3">
    <table class="table table-sm table-bordered table-striped">
        <thead>
        <tr>
            <th>Name</th>
            <th>Type</th>
            <th>Length</th>
            <th>Default</th>
            <th>Collation</th>
            <th>Attributes</th>
            <th>Nullable</th>
            <th>Index</th>
            <th>A_I</th>
            <th>Primary Key</th>
            <th>Comments</th>
        </tr>
        </thead>
        <tbody>

        @foreach (var t in _tableLines)
        {
            <tr>
                <td><input type="text" class="form-control newtable-control" @bind="t.Name" /></td>
                <td>
                    <select class="btselect" data-live-search="true" @bind="t.Type">
                        <option></option>
                        <option>INT</option>
                        <option>VARCHAR</option>
                        <option>TEXT</option>
                        <option>DATE</option>
                        <optgroup label="Numeric">
                            <option>TINYINT</option>
                            <option>SMALLINT</option>
                            <option>MEDIUMINT</option>
                            <option>FLOAT</option>
                            <option>DECIMAL</option>
                        </optgroup>
                    </select>
                </td>
                <td><input type="text" class="form-control newtable-control" @bind="t.Length" /></td>
                <td>
                    <select class="btselect" @bind="t.Default">
                        <option value="">None</option>
                    </select>
                </td>
                <td></td>
                <td></td>
                <td><input type="checkbox" class="form-check-input" @bind="t.Nullable" /></td>
                <td></td>
                <td><input type="checkbox" class="form-check-input" @bind="t.AutoIncrement" /></td>
                <td><input type="checkbox" class="form-check-input" @bind="t.PrimaryKey" /></td>
                <td></td>
            </tr>
        }

        </tbody>
    </table>
</div>
<div class="mb-3">
    <button class="btn btn-primary" @onclick="ConfirmButton">Confirm</button>
</div>

<script>
    $(".btselect").selectpicker({
        style: "btn-secondary bt-selectpicker"
    });

    var newTable = newTable || {};
    newTable.updatedLines = function (dotnetObject) {
        dotnetObject.invokeMethodAsync("UpdatedLines");
    };
    newTable.updateSelectpicker = function (dotnetObject) {
        $(".btselect").selectpicker({
            style: "btn-secondary bt-selectpicker"
        });
    };
</script>

@code {

    [Parameter]
    public string? Database { get; set; }

    private const int AmountStartCols = 3;
    private List<NewTableRow> _tableLines = new();

    private string _tableName = "";
    
    protected override void OnInitialized()
    {
        ResetView();
    }

    private void ResetView()
    {
        _tableLines = new List<NewTableRow>();
        for (var i = 0; i < AmountStartCols; i++)
        {
            _tableLines.Add(new NewTableRow());
        }
    }

    private async Task ConfirmButton()
    {
        if (Database == null) return;
        
        Console.WriteLine($"Creating Table {_tableName}...");
        foreach (var t in _tableLines)
        {
            if (string.IsNullOrEmpty(t.Name) || string.IsNullOrEmpty(t.Type)) continue;
            Console.WriteLine($"Name: {t.Name} Type: {t.Type} Length: {t.Length} Default: {t.Default} Nullable: {t.Nullable} AI: {t.AutoIncrement} PK: {t.PrimaryKey}");
        }

        await MySqlManagerService.CreateTable(Database, _tableName, _tableLines);
        await DatabaseInformationService.RefreshDatabaseList();
        ResetView();
    }

    private async Task AddLine()
    {
        _tableLines.Add(new NewTableRow());
        await InvokeAsync(StateHasChanged);
        var dotnetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("newTable.updatedLines", dotnetReference);
    }

    private async Task RemoveLine()
    {
        _tableLines.Remove(_tableLines[^1]);
        await InvokeAsync(StateHasChanged);
        var dotnetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("newTable.updatedLines", dotnetReference);
    }

    // first invoke javascript method "updatedLines" which then invokes this method which then again invokes a javascript function to update the select picker.
    // if select picker gets updated directly it results in the latest one not getting updated
    [JSInvokable("UpdatedLines")]
    public async Task UpdatedLines()
    {
        var dotnetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("newTable.updateSelectpicker", dotnetReference);
    }

}