@page "/database/{Database}"
@using MySqlManager.Components.Layout
@using MySqlManager.Dtos
@using MySqlManager.Services
@implements IDisposable
@inject TableInformationService TableInformationService
@inject SettingsService SettingsService
@inject TopRowService TopRowService
@inject TruncateService TruncateService
@inject IJSRuntime JSRuntime
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]


<h1>Database Overview</h1>
Parameter: @Database

@if (_tableList == null)
{
    if (_loading)
    {
        <div class="mt-4">Loading...</div>
    }
}
else
{
    <div class="mt-4">
        <table class="table table-sm table-bordered table-striped">
            <thead>
            <tr>
                <th>Table</th>
                <th>Rows</th>
                <th>Engine</th>
                <th>Collation</th>
                <th>Size</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var table in _tableList)
            {
                <tr>
                    <td><a href="@($"/database/{Database}/table/{table.Name}")">@table.Name</a></td>
                    <td>@table.Rows</td>
                    <td>@table.Engine</td>
                    <td>@table.Collation</td>
                    <td>
                        @if (table.SizeInMb < 1)
                        {
                            var sizeInKb = Math.Round((decimal)table.SizeInMb * 1000, 1);
                            <text>@sizeInKb.ToString("F1") KB</text>
                        }
                        else if(table.SizeInMb > 1000)
                        {
                            var sizeInGb = Math.Round((decimal)table.SizeInMb / 1000, 1);
                            <text>@sizeInGb.ToString("F1") GB</text>
                        }
                        else if(table.SizeInMb != null)
                        {
                            var sizeInMb = Math.Round((decimal)table.SizeInMb, 1);
                            <text>@sizeInMb.ToString("F1") MB</text>
                        }
                    </td>
                    <td>
                        <button type="button" class="btn btn-primary" data-bs-toggle="modal" data-bs-target="#truncateModal" data-bs-table-name="@(table.Name)">
                            Truncate
                        </button>
                    </td>
                </tr>
            }
            <tr>
                <th></th>
                <th></th>
                <th></th>
                <th></th>
                <th>
                    @if (_databaseSizeInMb < 1)
                    {
                    var sizeInKb = Math.Round((decimal)_databaseSizeInMb * 1000, 1);
                    <text>@sizeInKb.ToString("F1") KB</text>
                    }
                    else if(_databaseSizeInMb > 1000)
                    {
                    var sizeInGb = Math.Round((decimal)_databaseSizeInMb / 1000, 1);
                    <text>@sizeInGb.ToString("F1") GB</text>
                    }
                    else if(_databaseSizeInMb != null)
                    {
                    var sizeInMb = Math.Round((decimal)_databaseSizeInMb, 1);
                    <text>@sizeInMb.ToString("F1") MB</text>
                    }
                </th>
                <th></th>
            </tr>
            </tbody>
        </table>
    </div>
                    
}

<div class="modal" tabindex="-1" id="truncateModal">
    <div class="modal-dialog modal-dialog-centered">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Modal title</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal" aria-label="Close" id="truncateModalCloseButton"></button>
            </div>
            <div class="modal-body">
                <p>Modal body text goes here.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal" id="truncateModalClose2Button">Close</button>
                <button type="button" class="btn btn-primary" @onclick="Truncate" id="truncateModalTruncateButton">Truncate</button>
            </div>
        </div>
    </div>
</div>
<input type="hidden" id="truncatingTable" />

<script>
    var truncateModal = document.getElementById('truncateModal');
    var truncatingTableInput = document.getElementById('truncatingTable');
    truncateModal.addEventListener('show.bs.modal', function (event) {
        var button = event.relatedTarget;
        var tableName = button.getAttribute('data-bs-table-name');
        truncatingTableInput.value = tableName;

        var modalTitle = truncateModal.querySelector('.modal-title');
        var modalBody = truncateModal.querySelector('.modal-body');

        modalTitle.textContent = 'Truncate ' + tableName;
        modalBody.innerHTML = '\
            <div class="alert alert-danger">Attention! This action can not be undone!</div>\
            <p>Do you really want to truncate the table ' + tableName + '?</p>\
            ';
    });
    
    var dbOverview = dbOverview || {};
    
    dbOverview.truncate = function(dotnetobject) {
        let tableName = truncatingTableInput.value;
        dotnetobject.invokeMethodAsync('TruncateTable', tableName);
    };
    
    dbOverview.truncateLoading = function(dotnetobject) {
        var modalTitle = truncateModal.querySelector('.modal-title');
        var modalBody = truncateModal.querySelector('.modal-body');

        modalTitle.textContent = 'Loading...';
        modalBody.innerHTML = '\
            <p>Loading...</p>\
            ';
        
        var truncateModalCloseButton = document.getElementById('truncateModalCloseButton');
        var truncateModalClose2Button = document.getElementById('truncateModalClose2Button');
        var truncateModalTruncateButton = document.getElementById('truncateModalTruncateButton');
        
        truncateModalCloseButton.style.display = 'none';
        truncateModalClose2Button.style.display = 'none';
        truncateModalTruncateButton.style.display = 'none';
    };
    
    dbOverview.truncateFinished = function (dotnetobject) {
        var modal = bootstrap.Modal.getInstance(truncateModal);
        modal.hide();
        
        var truncateModalCloseButton = document.getElementById('truncateModalCloseButton');
        var truncateModalClose2Button = document.getElementById('truncateModalClose2Button');
        var truncateModalTruncateButton = document.getElementById('truncateModalTruncateButton');

        truncateModalCloseButton.style.display = 'block';
        truncateModalClose2Button.style.display = 'block';
        truncateModalTruncateButton.style.display = 'block';
    };
    
</script>

@code {
    private List<TableInformation>? _tableList;
    private bool _loading;
    private decimal? _databaseSizeInMb;

    [Parameter]
    public string? Database { get; set; }
    
    protected override async Task OnInitializedAsync()
    {
        _tableList = null;
        _loading = true;
        _databaseSizeInMb = null;
        TopRowService.SetTopRowForDatabaseView(Database, "overview");
        await Task.Delay(5);
        await LoadTableList();
    }

    public void Dispose()
    {
        TopRowService.ClearTopRow();
    }

    private async Task LoadTableList()
    {
        // todo fix for those databases
        if (Database == null) return;
        if (Database == "mysql") return;
        if (Database == "sys") return;
        if (Database == "performance_schema") return;
        if (Database == "information_schema") return;
        Console.WriteLine("Loading table list...");
        _tableList = await TableInformationService.GetTableList(Database, true);
        GetDatabaseSize();
        _loading = false;
    }

    private void GetDatabaseSize()
    {
        _databaseSizeInMb = 0;
        if (_tableList == null)
            return;
        foreach (var item in _tableList)
        {
            _databaseSizeInMb += item.SizeInMb;
        }
    }

    private async Task Truncate()
    {
        var dotnetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("dbOverview.truncate", dotnetReference);
    }

    [JSInvokable]
    public async Task TruncateTable(string tableName)
    {
        var dotnetReference = DotNetObjectReference.Create(this);
        await JSRuntime.InvokeVoidAsync("dbOverview.truncateLoading", dotnetReference);
        Console.WriteLine($"Truncate {tableName}");
        await TruncateService.TruncateTable(Database!, tableName);
        await JSRuntime.InvokeVoidAsync("dbOverview.truncateFinished", dotnetReference);
        await LoadTableList();
        await InvokeAsync(StateHasChanged);
    }

}