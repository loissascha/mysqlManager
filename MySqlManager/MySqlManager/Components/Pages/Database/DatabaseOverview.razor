@page "/database/{Database}"
@using MySqlManager.Components.Layout
@using MySqlManager.Dtos
@using MySqlManager.Services
@implements IDisposable
@inject TableInformationService TableInformationService
@inject SettingsService SettingsService
@inject TopRowService TopRowService
@inject OverlayService OverlayService
@rendermode @(new InteractiveServerRenderMode(prerender: false))
@attribute [StreamRendering]


<h1>Database Overview</h1>
Parameter: @Database

@if (_tableList == null)
{
    if (_loading)
    {
        <div class="mt-4">Loading...</div>
    }
}
else
{
    <div class="mt-4">
        <table class="table table-sm table-bordered table-striped">
            <thead>
            <tr>
                <th>Table</th>
                <th>Rows</th>
                <th>Engine</th>
                <th>Collation</th>
                <th>Size</th>
                <th>Actions</th>
            </tr>
            </thead>
            <tbody>
            @foreach (var table in _tableList)
            {
                <tr>
                    <td><a href="@($"/database/{Database}/table/{table.Name}")">@table.Name</a></td>
                    <td>@table.Rows</td>
                    <td>@table.Engine</td>
                    <td>@table.Collation</td>
                    <td>
                        @if (table.SizeInMb < 1)
                        {
                            var sizeInKb = Math.Round((decimal)table.SizeInMb * 1000, 1);
                            <text>@sizeInKb.ToString("F1") KB</text>
                        }
                        else if(table.SizeInMb > 1000)
                        {
                            var sizeInGb = Math.Round((decimal)table.SizeInMb / 1000, 1);
                            <text>@sizeInGb.ToString("F1") GB</text>
                        }
                        else if(table.SizeInMb != null)
                        {
                            var sizeInMb = Math.Round((decimal)table.SizeInMb, 1);
                            <text>@sizeInMb.ToString("F1") MB</text>
                        }
                    </td>
                    <td><a style="cursor:pointer;" @onclick="@(e => { TruncateTable(table.Name);})">Truncate</a></td>
                </tr>
            }
            </tbody>
        </table>
    </div>
}


@code {
    // TODO use bootstrap modal instead of ovleray component
    
    private List<TableInformation>? _tableList;
    private bool _loading;
    

    [Parameter]
    public string? Database { get; set; }
    
    
    protected override async Task OnInitializedAsync()
    {
        _tableList = null;
        _loading = true;
        TopRowService.SetTopRowForDatabaseView(Database, "overview");
        await Task.Delay(5);
        await LoadTableList();
    }

    public void Dispose()
    {
        TopRowService.ClearTopRow();
    }

    private async Task LoadTableList()
    {
        if (Database == null) return;
        if (Database == "mysql") return;
        if (Database == "sys") return;
        if (Database == "performance_schema") return;
        if (Database == "information_schema") return;
        Console.WriteLine("Loading table list...");
        _tableList = await TableInformationService.GetTableList(Database, true);
        _loading = false;
    }

    private void TruncateTable(string? tableName)
    {
        Console.WriteLine("Truncate Table: " + tableName);
        OverlayService.SetOverlay("Truncate " + tableName, _builder =>
        {
            var seq = -1;
            _builder.AddContent(++seq, "Do you really want to truncate this table?");
        });
        OverlayService.ShowOverlay();
    }

    
}