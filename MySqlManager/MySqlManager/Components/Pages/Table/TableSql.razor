@page "/database/{Database}/table/{Table}/sql"
@using System.Data
@using MySqlManager.Components.Layout
@using MySqlManager.Dtos
@using MySqlManager.Services
@inject SqlCommandService SqlCommandService
@rendermode InteractiveServer

<h1>SQL</h1>
Parameter: @Database / @Table
<br /><br />
<textarea @bind="SqlAreaContent" class="sqlarea"></textarea><br />
<button class="btn btn-primary" @onclick="PressGo">Go</button>
@if (_resultExceptionText != null)
{
    <div class="alert alert-danger mt-4" role="alert">
        @_resultExceptionText
    </div>
}
@if (_runSqlResult != null)
{
    <p class="mt-4">Showing @_runSqlResult.Offset-@(_runSqlResult.Offset + _runSqlResult.Limit) of @_runSqlResult.ResultCount Results</p>
    <table class="table table-sm table-bordered table-striped mt-2">
        <thead>
        <tr>
            @foreach (var column in _runSqlResult.DataTable.Columns)
            {
                <th>@column.ToString()</th>
            }
        </tr>
        </thead>
        <tbody>
        
            @foreach (var row in _runSqlResult.DataTable.Rows)
            {
                var c = row as DataRow;
                <tr>
                    @if (c?.ItemArray != null)
                    {
                        foreach (var item in c.ItemArray)
                        {
                            <td>@item?.ToString()</td>
                        }
                    }
                </tr>
            }
        
        </tbody>
    </table>
}

@code {

    [Parameter] public string? Database { get; set; }

    [Parameter] public string? Table { get; set; }

    [CascadingParameter] public MainLayout? Layout { get; set; }

    private string? SqlAreaContent { get; set; }

    private RunSqlResult? _runSqlResult;

    private string? _resultExceptionText;

    protected override void OnInitialized()
    {
        _runSqlResult = null;
        Layout?.SetTopRowForTableView(Database, Table, "sql");
    }

    private async Task PressGo()
    {
        _runSqlResult = null;
        _resultExceptionText = null;
        StateHasChanged();
        
        try
        {
            //await Task.Delay(65000);
            _runSqlResult = await SqlCommandService.RunSql(Database, string.IsNullOrEmpty(SqlAreaContent) ? "" : SqlAreaContent);
        }
        catch (Exception exception)
        {
            _resultExceptionText = exception.Message;
        }

        StateHasChanged();
    }



}