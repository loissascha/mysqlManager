@page "/database/{Database}/table/{Table}/sql"
@using System.Data
@using MySqlManager.Dtos
@using MySqlManager.Services
@implements IDisposable
@inject SqlCommandService SqlCommandService
@inject TopRowService TopRowService
@inject TableInformationService TableInformationService
@rendermode @(new InteractiveServerRenderMode(prerender: false))

<h1>SQL</h1>
Parameter: @Database / @Table
<br /><br />
<div class="row">
    <div class="col-9">
        <textarea @bind="SqlAreaContent" class="sqlarea"></textarea><br />
        <button class="btn btn-primary" @onclick="PressGo">Go</button>
    </div>
    <div class="col-3">
        <table class="table table-sm table-bordered table-striped">
            <tbody>
                @foreach (var column in _columnInformations)
                {
                    <tr>
                        <td>@column.Field</td>
                        <td>@column.Type</td>
                    </tr>
                }
            </tbody>
        </table>
    </div>
</div>



@if (_resultExceptionText != null)
{
    <div class="alert alert-danger mt-4" role="alert">
        @_resultExceptionText
    </div>
}
@if (_runSqlResult != null)
{
    if (!_runSqlResult.ShowDatagrid)
    {
        <div class="alert alert-success mt-4" role="alert">Success!</div>   
    }
    else
    {
        <p class="mt-4">Showing @_runSqlResult.Offset-@(_runSqlResult.Offset + _runSqlResult.Limit) of @_runSqlResult.ResultCount Results</p>
        <table class="table table-sm table-bordered table-striped mt-2">
            <thead>
            <tr>
                @foreach (var column in _runSqlResult.DataTable.Columns)
                {
                    <th>@column.ToString()</th>
                }
            </tr>
            </thead>
            <tbody>

            @foreach (var row in _runSqlResult.DataTable.Rows)
            {
                var c = row as DataRow;
                <tr>
                    @if (c?.ItemArray != null)
                    {
                        foreach (var item in c.ItemArray)
                        {
                            <td>@item?.ToString()</td>
                        }
                    }
                </tr>
            }

            </tbody>
        </table>
    }
}

@code {

    [Parameter] public string? Database { get; set; }

    [Parameter] public string? Table { get; set; }

    private string? SqlAreaContent { get; set; }

    private RunSqlResult? _runSqlResult;

    private string? _resultExceptionText;
    
    private List<TableColumnInformation> _columnInformations = new List<TableColumnInformation>();

    protected override async Task OnInitializedAsync()
    {
        _runSqlResult = null;
        TopRowService.SetTopRowForTableView(Database, Table, "sql");
        await GetTableColumnsInfo();
    }
    
    public void Dispose()
    {
        TopRowService.ClearTopRow();
    }

    private async Task PressGo()
    {
        _runSqlResult = null;
        _resultExceptionText = null;
        StateHasChanged();
        
        try
        {
            //await Task.Delay(65000);
            _runSqlResult = await SqlCommandService.RunSql(Database, string.IsNullOrEmpty(SqlAreaContent) ? "" : SqlAreaContent);
        }
        catch (Exception exception)
        {
            _resultExceptionText = exception.Message;
        }

        StateHasChanged();
    }
    
    private async Task GetTableColumnsInfo()
    {
        _columnInformations = await TableInformationService.GetTableColumnInfos(Database, Table);
    }

    
}